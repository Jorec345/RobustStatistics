library(robustbase)
install.packages("robustbase")
library(robustbase)
data(hbk)
View(hbk)
###getting just the first three column for analysis.
hbk.x <- data.matrix(hbk[,1:3])
##measures of the centre or location
median(x1)
library(MASS)
##measures of the centre or location
median(x1)
?cat
##measures of the centre or location
median([1])
##measures of the centre or location
median(hbk.x[,1])
mean(hbk.x[,1])
library(robustbase)
data(hbk)
###getting just the first three column for analysis.
hbk.x <- data.matrix(hbk[,1:3])
library(MASS)
##measures of the centre or location
median(hbk.x[,1])
mean(hbk.x[,1])
##robust estimators of the centre
###trimming 20% off both tails
tri
##robust estimators of the centre
###trimming 20% off both tails
trimws(o.2)
##robust estimators of the centre
###trimming 20% off both tails
trimmed.mean <- c("20% trimmed mean(x1) =", mean(hbk[,1]), trim = 0.2)
trimmed.mean
##robust estimators of the centre
###trimming 20% off both tails
trimmed.mean <- c("20% trimmed mean(x1) =", mean(hbk[,1]), trimws = 0.2)
trimmed.mean
trim <- 20% trimmed mean(hbk[,1])
trim <- c(20% trimmed mean(hbk[,1]))
##robust estimators of the centre
###trimming 20% off both tails
fit <- hm_summary(fit, robust = FALSE)
library(robustbase)
library(dplyr)
##consuming in the safaricom data
safaricomdata <- read.csv("safaricom_prices.csv", header = TRUE)
str(safaricomdata)
#Data Processing
##selecting data from 2019
trainData <-
safaricomdata %>%
mutate(NewDate = as.Date(MarketDate,format = "%d/%m/%Y"))%>%
filter(NewDate >= "2015-01-01",NewDate <= "2019-12-31")%>%
dplyr::select(NewDate,MarketPrice)
###selecting data from 2020
testData <-
safaricomdata %>%
mutate(NewDate = as.Date(MarketDate,format = "%d/%m/%Y"))%>%
filter(NewDate >= "2020-01-01")%>%
dplyr::select(NewDate,MarketPrice)
trimmedMean <- function(prices,percentBound=0.2){
n = length(prices)
sortedPrices = sort(prices)
nToBeRemoved = percentBound * n
rmfstN = sortedPrices[ -c(1:nToBeRemoved)]
rmlstN = rmfstN[1:(length(rmfstN) - nToBeRemoved)]
return(sum(rmlstN)/length(rmlstN))
}
##applying the robust estimators
trimmedMean(trainData$MarketPrice,percentremove)
percentremove <- 0.2
##applying the robust estimators
trimmedMean(trainData$MarketPrice,percentremove)
winsoreziedMean <- function(prices,percentBound=0.2){
n = length(prices)
sortedPrices = sort(prices)
nToBeRemoved = percentBound * n
rmfstN = sortedPrices[ -c(1:nToBeRemoved)]
rmlstN = rmfstN[1:(length(rmfstN) - nToBeRemoved)]
maxVal = max(rmlstN)
minValue = min(rmlstN)
newFstSeq = rep(maxVal,nToBeRemoved)
newLStVals = rep(minValue,nToBeRemoved)
newSeq = c(newFstSeq,rmlstN)
newSeqWthTail = c(newSeq,newLStVals)
return(sum(newSeqWthTail)/length(newSeqWthTail))
}
percentremove <- 0.2
winsoreziedMean(trainData$MarketPrice,percentremove)
mean(trainData$MarketPrice)
mean(trainData$MarketPrice)
##applying the robust estimators
trimmedMean(trainData$MarketPrice,percentremove)
winsoreziedMean(trainData$MarketPrice,percentremove)
mean(trainData$MarketPrice)
